/* Generated by Quick UML for Java */

package com.jfbuilds.playngame.general;

import java.util.ArrayList;
import java.util.HashSet;

import playn.core.GroupLayer;
import playn.core.Layer;

import com.jfbuilds.playngame.abilities.JFBAbilityInterface;
import com.jfbuilds.playngame.exceptions.AbilityImplementationException;
import com.jfbuilds.playngame.exceptions.ContainerImplementationException;
import com.jfbuilds.playngame.exceptions.ObjectiveImplementationException;
import com.jfbuilds.playngame.objectives.JFBObjectiveInterface;

/**
 *
 **/
public interface JFBContainerInterface {

	/* ===================================== */
	/* == Member Variables == */
	/* ===================================== */

	// private ArrayList<? extends JFBContainerInterface> containerFamily;
	//
	// private HashSet<? extends JFBAbilityInterface> abilityFamily;
	//
	// private HashSet<? extends JFBObjectiveInterface> objectiveFamily;

	/* ===================================== */
	/* == Methods == */
	/* ===================================== */

	/**
	 *
	 **/
	public void addAbility(JFBAbilityInterface ability_) throws AbilityImplementationException;

	/**
	 *
	 **/
	public void addContainer(JFBContainerInterface container_) throws ContainerImplementationException;

	/**
	 * add a layer from base
	 **/
	public Layer addLayer(Layer layer);

	/**
	 *
	 **/
	public void addObjective(JFBObjectiveInterface objective_) throws ObjectiveImplementationException;

	/**
	 * create a new instance
	 **/
	public void create();

	/**
	 * destroy the instance and close resources
	 **/
	public void destroy();

	/**
	 * @return the abilities
	 */
	public HashSet<JFBAbilityInterface> getAbilities();

	/**
	 * get base GroupLayer for container visuals
	 **/
	public GroupLayer getBase();

	/**
	 *
	 **/
	public ArrayList<? extends JFBContainerInterface> getContainerFamily();

	/**
	 * @return the containers
	 */
	public ArrayList<JFBContainerInterface> getContainers();

	int getContentIndex();

	/**
	 * get name of container
	 **/
	public String getName();

	/**
	 * @return the objectives
	 */
	public HashSet<JFBObjectiveInterface> getObjectives();

	/**
	 * create a new instance
	 **/
	public void init();

	/**
	 * initialize the base to root or groupLayer
	 **/
	public void initBase();

	/**
	 *
	 **/
	public boolean isContainerCandidate(JFBContainerInterface candidate);

	/**
	 * load an instance from a saved state
	 **/
	public void load();

	/**
	 * change to next instance in container family if allowed
	 **/
	public void next();

	/**
	 * get the parent container
	 **/
	public JFBContainerInterface parent();

	/**
	 * pause the current instance
	 **/
	public void pause();

	/**
	 * play current instance
	 **/
	public void play();

	/**
	 * print info for layer composition
	 **/
	public void printBaseInfo();

	/**
	 *
	 **/
	public void removeAbility(JFBAbilityInterface ability_);

	/**
	 *
	 **/
	public void removeContainer(JFBContainerInterface container_);

	/**
	 * remove a layer from base
	 **/
	public Layer removeLayer();

	/**
	 *
	 **/
	public void removeObjective(JFBObjectiveInterface objective_);

	/**
	 * resume the current instance if paused
	 **/
	public void resume();

	/**
	 * save the instance to a saved state
	 **/
	public void save();

	/**
	 * @param abilities
	 *            the abilities to set
	 */
	public void setAbilities(HashSet<JFBAbilityInterface> abilities);

	/**
	 * set base groupLayer for container visuals
	 **/
	public void setBase(GroupLayer layer);

	/**
	 *
	 **/
	public void setContainerFamily(ArrayList<? extends JFBContainerInterface> containerFamily_);

	/**
	 * @param containers
	 *            the containers to set
	 */
	public void setContainers(ArrayList<JFBContainerInterface> containers);

	void setContentIndex(int contentIndex_);

	/**
	 * set name of container
	 **/
	public void setName(String name);

	/**
	 * @param objectives
	 *            the objectives to set
	 */
	public void setObjectives(HashSet<JFBObjectiveInterface> objectives);

	/**
	 * set the parent container
	 **/
	public void setParent(JFBContainerInterface parent_);

}