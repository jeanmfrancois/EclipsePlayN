/* Generated by Quick UML for Java */

package com.jfbuilds.playngame.general;

import static playn.core.PlayN.assets;
import static playn.core.PlayN.graphics;
import static playn.core.PlayN.pointer;

import java.util.ArrayList;
import java.util.HashSet;

import playn.core.Game;
import playn.core.GroupLayer;
import playn.core.Pointer;
import playn.core.Sound;

import com.jfbuilds.playngame.abilities.JFBAbilityInterface;
import com.jfbuilds.playngame.abilities.JFBGameAbilityInterface;
import com.jfbuilds.playngame.exceptions.ContainerNullPointerException;
import com.jfbuilds.playngame.exceptions.InvalidSetGetException;
import com.jfbuilds.playngame.objectives.JFBGameObjectiveInterface;
import com.jfbuilds.playngame.objectives.JFBObjectiveInterface;
import com.jfbuilds.playngame.scenes.JFBSceneInterface;

/**
 *
 **/
public abstract class JFBAbstractGame extends JFBAbstractContainer implements JFBGameInterface, JFBContainerInterface,
Game {
	private GroupLayer base;
	private ArrayList<? extends JFBGameAbilityInterface> gameAbilities;
	private ArrayList<? extends JFBGameObjectiveInterface> gameObjectives;
	private ArrayList<? extends JFBSceneInterface> gameScenes;
	Sound click1;
	Sound click2;
	Sound click3;

	/*
	 * (non-Javadoc)
	 *
	 * @see com.jfbuilds.playngame.general.JFBGameInterface#getCurrectScene()
	 */
	@Override
	public abstract void createScenes();

	/**
	 * @return the base
	 */
	@Override
	public GroupLayer getBase() {
		return base;
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.jfbuilds.playngame.general.JFBGameInterface#getCurrectScene()
	 */
	@Override
	public JFBSceneInterface getCurrentScene() {
		try {
			if (this.getGameScenes() != null) {
				return (JFBSceneInterface) getGameScenes().get(this.getContentIndex());
			} else {
				throw new ContainerNullPointerException();
			}
		} catch (ContainerNullPointerException e) {
			e.getMessage();
			System.out.println("No scenes are loaded for game.");
			e.printStackTrace();
		}
		return null;
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.jfbuilds.playngame.general.JFBGameInterface#getGameAbilities()
	 */
	@Override
	public HashSet<JFBAbilityInterface> getGameAbilities() {
		return getAbilities();
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.jfbuilds.playngame.general.JFBGameInterface#getGameObjectives()
	 */
	@Override
	public HashSet<JFBObjectiveInterface> getGameObjectives() {
		return getObjectives();
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.jfbuilds.playngame.general.JFBGameInterface#getGameScenes()
	 */
	@Override
	public ArrayList<JFBContainerInterface> getGameScenes() {
		return getContainers();
	}

	@Override
	public void init() {
		super.init();
		initScenes();
		setName("Abstract Game!");
	}

	@Override
	public void initBase() {
		// initialize the base layer by setting it to the root
		graphics().rootLayer().removeAll();
		graphics().rootLayer().add(getBase());
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see com.jfbuilds.playngame.general.JFBGameInterface#getCurrectScene()
	 */
	@Override
	public void initScenes() {

		// set the scene index to 0
		setContentIndex(0);

		// create the scenes for the game
		createScenes();

		// get the current scene
		System.out.println("Current Scene is " + getCurrentScene().getName());

		// set the current scene display
		setBase(getCurrentScene().getBase());

		// initialize the base, connecting root to current scene's base
		initBase();

		// add a listener for pointer (mouse, touch) input
		pointer().setListener(new Pointer.Adapter() {
			@Override
			public void onPointerEnd(Pointer.Event event) {
				userSelect(event.x(), event.y());
			}
		});

		click1 = assets().getSound("sounds/sword-whip-02");
		click2 = assets().getSound("sounds/sword-whip-03");
		click3 = assets().getSound("sounds/sword-whip-04");

	}

	/**
	 * @param base
	 *            the base to set
	 */
	@Override
	synchronized public void setBase(GroupLayer base_) {
		this.base = base_;
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * com.jfbuilds.playngame.general.JFBGameInterface#setCurrectScene(com.jfbuilds
	 * .playngame.scenes.JFBSceneInterface)
	 */
	@Override
	public void setCurrentScene(JFBSceneInterface currentScene_) {
		// Should not be able to set current scene but only change index'
		try {
			throw new InvalidSetGetException();
		} catch (InvalidSetGetException e) {
			e.getMessage();
			System.out.println("Game: Setting current scene");
			e.printStackTrace();
		}

	}

	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * com.jfbuilds.playngame.general.JFBGameInterface#setGameAbilities(java
	 * .util.ArrayList)
	 */
	@Override
	public void setGameAbilities(HashSet<JFBAbilityInterface> gameAbilities_) {
		try {
			throw new InvalidSetGetException();
			// gameScenes = gameScenes_;
		} catch (InvalidSetGetException e) {
			e.getMessage();
			System.out.println("Game: Abilities");
			e.printStackTrace();
		}
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * com.jfbuilds.playngame.general.JFBGameInterface#setGameObjectives(java
	 * .util.ArrayList)
	 */
	@Override
	public void setGameObjectives(HashSet<JFBObjectiveInterface> gameObjectives_) {
		try {
			throw new InvalidSetGetException();
			// gameScenes = gameScenes_;
		} catch (InvalidSetGetException e) {
			e.getMessage();
			System.out.println("Game: Objective");
			e.printStackTrace();
		}
	}

	/*
	 * (non-Javadoc)
	 *
	 * @see
	 * com.jfbuilds.playngame.general.JFBGameInterface#setGameScenes(java.util
	 * .ArrayList)
	 */
	@Override
	public void setGameScenes(ArrayList<JFBContainerInterface> gameScenes_) {
		try {
			throw new InvalidSetGetException();
			// gameScenes = gameScenes_;
		} catch (InvalidSetGetException e) {
			e.getMessage();
			System.out.println("Game: Scenes");
			e.printStackTrace();
		}
	}

	@Override
	public void tick(int elapsed) {
		// TODO Auto-generated method stub

	}

	public void userSelect(float x, float y) {
		System.out.println("User click: (" + x + ", " + y + ") - Index:" + getContentIndex() + " /Size:" + getContainers().size());
		
		if (x < 100) {
			click1.play();
			System.out.println("PREVIOUS");
			getCurrentScene().previous();
		} else if (x > 540) {
			click2.play();
			System.out.println("NEXT");
			getCurrentScene().next();
		} else {
			System.out.println("VOID");
			click3.play();
		}
	}

}